* Frequently Asked Questions (FAQ). 					:TOC:
   - [[#where-is-helm-documentation][Where is Helm documentation?]]
   - [[#why-does-melpa-update-give-errors][Why does MELPA update give errors?]]
   - [[#why-is-calling-helm-m-x-with-a-prefix-argument-giving-an-error][Why is calling ~helm-M-x~ with a prefix argument giving an error?]]
   - [[#how-do-i-get-helm-and-popwin-to-play-nice][How do I get Helm and Popwin to play nice?]]
   - [[#what-happened-to-the-grep-and-multi-occur-commands][What happened to the =grep= and =multi-occur= commands?]]
   - [[#why-cant-i-exit-completing-read-with-an-empty-string][Why can't I exit ~completing-read~ with an empty string?]]
   - [[#why-am-i-getting-warnings-when-compiling-with-emacs-2431][Why am I getting warnings when compiling with emacs-24.3.1?]]
   - [[#why-is-function-put-void][Why is ~function-put~ void?]]
   - [[#why-is-a-customizable-helm-source-nil][Why is a customizable Helm source ~nil~?]]
   - [[#why-did-the-debugger-enter-lisp-error-when-using-sessionel][Why did the debugger enter Lisp error when using session.el?]]
   - [[#why-helm-mode-is-so-long-to-startup][Why helm-mode is so long to startup?]]
   - [[#helm-mode-conflict-with-ido-everywhere][helm-mode conflict with ido-everywhere]]
   - [[#why-after-enabling-helm-mode-m-x-and-c-x-c-f-are-not-helmized][Why after enabling helm-mode =M-x= and =C-x C-f= are not helmized?]]
   - [[#can-you-modify-the-emacs-vanilla-helmized-command-to-behave-differently][Can you modify the emacs vanilla helmized command to behave differently?]]

** Where is Helm documentation?

*Hit "C-h m" within a Helm session, or use the "helm-documentation" command*.

A tip to hit =C-h m= within a Helm session can be found on the mode line. All help pages are grouped in a [[http://orgmode.org/][Org file]] generated by the command ~helm-documentation~.

** Why does MELPA update give errors?

*You should not encounter this problem anymore*.

Helm, when installed from (M)ELPA, specifies a dependency on [[https://github.com/jwiegley/emacs-async][emacs-async]], which should resolve this problem. If it does happen, however, do the following:

1. Uninstall =helm= and =async= with ~package-list-packages~.
2. Close Emacs
3. Start ~emacs -Q~.
4. Reinstall =helm= from ~package-list-packages~.
5. Restart Emacs

If problem persists, [[https://github.com/emacs-helm/helm/issues][report an issue]].

*** Notes

- After upgrading (helm or whatever), you will have to restart emacs (expect problems otherwise).
- [[https://github.com/jwiegley/emacs-async][emacs-async]] is available as [[https://melpa.org/#/async][async]] in MELPA.
- Async compilation of packages can be disabled per package or globally in =async-bytecomp.el=. If you do so, don't complain if you have errors after upgrading Helm or Helm modules.

** Why is calling ~helm-M-x~ with a prefix argument giving an error?

*Use prefix args after starting helm-M-x, not before*.

Read the Helm documentation (~helm-documentation~, bound by default to =<helm-prefix> h h=).

Also see Wiki page for ~helm-M-x~.

*Update*: After Helm v1.9.8, using a prefix argument before ~helm-M-x~ is possible. See [[https://github.com/emacs-helm/helm/wiki/Commands]]

** How do I get Helm and Popwin to play nice?
*See the [[https://github.com/emacs-helm/helm/wiki/Popwin][wiki page on working with Popwin]]*.

** What happened to the =grep= and =multi-occur= commands?
*They have been removed due to redundancy*.

The =grep= (~helm-do-grep~, ~helm-do-zgrep~, ~helm-do-pdfgrep~) and =multi-occur= (~helm-multi-occur~) commands
got removed because they were unuseful as you can use them from ~helm-find-files~ and file-related commands (e.g. ~helm-locate~).
So now if you want to run helm grep, start ~helm-find-files~, choose you files and hit ~C-s~.
The only difference now is that you hit ~C-s~ instead of ~RET~.  Not the end of the world! 

** Why can't I exit ~completing-read~ with an empty string?

*Hit C-RET or M-RET*.

This can be seen in the mode line.

** Why am I getting warnings when compiling with emacs-24.3.1?

*Don't be afraid, just ignore them ;-)*.

Helm has no warnings when compiling with emacs-24.4 or later. When compiling with 24.3, you may have many warnings (due to bugs in Emacs itself related to [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] and [[https://www.gnu.org/software/emacs/manual/html_node/eieio/][EIEIO]]). 

** Why is ~function-put~ void?

*Reinstall Helm*.

This is due to a bad installation of Helm (see [[https://github.com/emacs-helm/helm/wiki#ihaveupdatedfrommelpaandihaveerrors][here]]). 

** Why is a customizable Helm source ~nil~?

If the source is ~nil~, it is probably set up when command starts, and may be defined using ~helm-make-source~ with a specialized class.

If the source is defined with a specialized class (not a generic class like ~helm-source-sync~, ~helm-source-async~, ~helm-source-in-buffer~, ~helm-source-dummy~, etc.), you can add a new ~defmethod~ in your init file like:

#+BEGIN_SRC emacs-lisp
  (defmethod helm-setup-user-source ((source helm-source-ffiles))
    (helm-source-add-action-to-source-if
     "Byte compile file(s) async"
     'async-byte-compile-file
     source
     'helm-ff-candidates-lisp-p))
#+END_SRC

or

#+BEGIN_SRC emacs-lisp
  (defmethod helm-setup-user-source ((source helm-source-multi-occur))
    (setf (slot-value source 'follow) 1))
#+END_SRC

You can also set up the source yourself:

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "helm-regexp.el"
    (setq helm-source-occur (helm-make-source "Occur" 'helm-source-multi-occur
                              :follow 1))
    (setq helm-source-moccur (helm-make-source "Moccur" 'helm-source-multi-occur
                               :follow 1)))
#+END_SRC

NOTE: In these examples the ~follow~ slot is used, but note that
starting from helm-2.1.0 to setup follow persistently, the only thing
you have to do is

#+BEGIN_SRC emacs-lisp
  (setq helm-follow-mode-persistent t)
#+END_SRC

and when you hit ~C-c C-f~ in any source helm-follow-mode will be
turned on now and for next emacs sessions until you hit again ~C-c C-f~.

*** Notes
- Don't define a new ~defmethod~ ~helm-setup-user-source~ with generic classes as specified above.

** Why did the debugger enter Lisp error when using session.el?
You may endup with Lisp error ~(void-variable \.\.\.)~
*May be due to using session.el*.

See [[https://github.com/emacs-helm/helm/issues/94][here]] for how to fix this.

** Why helm-mode is so long to startup?
See [[https://github.com/emacs-helm/helm/issues/1000][Issue 1000]].
** helm-mode conflict with ido-everywhere

Don't use ~ido-everywhere~ but only ~helm-mode~ and customize which
commands you want to use ido with variable
~helm-completing-read-handlers-alist~
See [[https://github.com/emacs-helm/helm/issues/1527][Here]]
** Why after enabling helm-mode =M-x= and =C-x C-f= are not helmized?
Commands ~execute-extended-command~ and ~find-file~ bound respectively
to =M-x= and =C-x C-f= have been disabled to force people using the
real things that are ~helm-M-x~ and ~helm-find-files~, the only thing
you have to do to use these commands is to bound them respectively to
=M-x= and =C-x C-f=.
If you really want to have back the helmized commands (less powerfull
and slower for =M-x=), remove them from =helm-completing-read-handlers-alist=.
** Can you modify the emacs vanilla helmized command to behave differently?
No, helm uses a generic function for helmizing emacs vanilla commands
and should behave exactly like them except for the completion model.
When available use instead its native helm counterpart.
