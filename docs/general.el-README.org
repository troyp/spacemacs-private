[[https://melpa.org/#/general][file:https://melpa.org/packages/general-badge.svg]]

[[https://github.com/noctuid/general.el][file:http://i.imgur.com/SXA66y7.png]]
#+BEGIN_QUOTE
A general is a leader. -- onioncheese
#+END_QUOTE

* About
=general.el= provides a more convenient way to bind keys in emacs for both evil and non-evil users. ~general-define-key~ allows defining multiple keys at once, implicitly wrapping key strings with ~(kbd ...)~, having named prefix key sequences (like the leader key in vim), and more.

* Advantages Over Evil-Leader
- Does not depend on evil (these points apply to regular emacs keybindings)
- Allows an arbitrary number of prefix keys or "leaders" of any length
- Does not /require/ a prefix key
- Allows choosing the specific evil state(s) and keymap(s) to map keys in
- Allows deferring keybindings until the keymap exists (no need for ~eval-after-load~)
- Allows for buffer local keybindings
- Does not require a global minor mode for all functionality
- For evil, wraps ~evil-define-key~ instead of weirdly re-implementing half of it
- Allows using a single function for all keybindings (with wrappers)
- Allows displaying all bound keys

* Basic Setup
Since general provides variables for defaults to the various keyword arguments, you can use it in a very specific way. For example, you could set =general-default-prefix= to a prefix of your choosing and only use it for defining prefix keys. I personally don't change any of these variables and use it in a more general way for all my keybindings. The main advantage of using ~general-define-key~ (or a wrapper for it) even in cases where its extra functionality may be not used is that all keybindings are recorded and can be displayed later with ~general-describe-keybindings~.

** Non-evil
#+begin_src emacs-lisp
(require 'general)
(setq my-leader1 "C-c")

;; without :keymaps, general-define-key acts similarly to global-set-key
;; bind "C-c a" and "C-c b" globally
(general-define-key :prefix my-leader1
                    "a" 'some-command
                    "b" 'another-command)

;; or without a prefix
(general-define-key
 "C-c a" 'some-command
 "C-c b" 'another-command)

;; bind a key in a specific keymap (keymaps must be quoted)
(general-define-key :keymaps 'org-mode-map
                    "TAB" 'org-cycle)

;; if you prefer an explicit (kbd) or don't want (kbd) at all:
(setq general-implicit-kbd nil)
(general-define-key
 (kbd "C-c a") 'some-command
 (kbd "C-c b") 'another-command)
#+end_src
** Evil
#+begin_src emacs-lisp
(require 'general)
;; bind a key globally in normal state; keymaps must be quoted
(setq general-default-keymaps 'evil-normal-state-map)
;; bind j and k in normal state globally
(general-define-key
 "j" 'evil-next-visual-line
 "k" 'evil-previous-visual-line)

;; bind gj and gk
(general-define-key :prefix "g"
                    "j" 'evil-next-line
                    "k" 'evil-previous-line)

;; named prefix key
(setq my-leader1 ",")
(general-define-key :prefix my-leader1
                    "f" 'find-file)

;; a default prefix sequence
(setq general-default-prefix ",")
(general-define-key "f" 'find-file)

;; bind a key in multiple states
(general-define-key :keymaps 'org-mode-map
                    :states '(insert emacs)
                    "<tab>" 'org-cycle)
#+end_src

Vim-like definitions:
#+begin_src emacs-lisp
(general-evil-setup)
;; all keywords arguments are still supported
(general-nmap :prefix "SPC"
              "p" 'helm-mini)

;; bind in motion state (inherited by the normal, visual, and operator states)
(general-mmap "j" 'evil-next-visual-line
              "k" 'evil-previous-visual-line)

;; alternatively, for shorter names
(general-evil-setup t)
(mmap "j" 'evil-next-visual-line
      "k" 'evil-previous-visual-line)
#+end_src
* More Details
This package provides one main function, ~general-define-key~, for key definitions for both evil and non-evil users. If you do not like keyword arguments or would like to create your own key-defining functions, this package also allows for these things.

** Settings and Keyword Arguments
=general-implicit-kbd= can be set to nil if you want to manually use ~(kbd "keys")~ or if you don't want to use kbd at all.

=general-default-prefix=, =general-default-states=, and =general-default-keymaps= determine the defaults for the corresponding keyword arguments =:prefix=, =:states=, and =:keymaps=. By default, there is no prefix or state (each is nil), and the keymap is ~(quote global)~. Each keymap can either be a quoted keymap or ~(quote global)~ or ~(quote local)~. When the keymap is =local=, the key will be bound only in the current buffer (see [[#buffer-local-keybindings][Buffer Local Keybindings]]). When the keymap is =global=, the key will be bound in ~(current-global-map)~.

~general-default-states~ and ~general-default-keymaps~ can be lists or a single element, allowing the user to define keys for multiple evil states or keymaps simultaneously. This can be useful in certain situations to prevent redundant keybindings.

Using a different prefix for the insert and emacs states can be done with =:non-normal-prefix= or =:global-prefix=. By default, =:prefix= will apply to all keys, but if one (or both) of the other prefix keywords is specified, it will only apply to evil states besides insert and emacs. This is also the case for the global evil keymaps such as =evil-normal-state-map=. =:non-normal-prefix= will always only apply to the insert and emacs states. =:global-prefix= will apply to all keys. The corresponding default variables are =general-default-non-normal-prefix= and =general-default-global-prefix=. For example, this command will bind =SPC /= to swiper in normal state and =M-SPC /= to swiper in emacs and insert state:
#+begin_src emacs-lisp
(general-define-key :states '(normal insert emacs)
                    :keymaps 'text-mode-map
                    :prefix "SPC"
                    :non-normal-prefix "M-SPC"
                    "/" 'swiper)
#+end_src

General is flexible in allowing you to choose how you write things, so if the above would be something you'd use often, you could create a function with the above state and prefix keyword arguments as defaults using ~evil-general-create-definer~ and write the definition like this:
#+begin_src emacs-lisp
(my-normal-and-insert-define-key "/" 'swiper)
#+end_src

The =:infix= keyword can be used to sandwich keys in between all of the specified prefix keys and the keys in each mapping. This is mainly useful when using multiple prefix keywords and especially when using wrappers. For example, if you wanted to define several keys that were prefixed with =SPC g= in normal state and =M-SPC g= in insert state, you could use the previous wrapper with =:infix= instead of re-specifying both =:prefix= and =:non-normal-prefix=:
#+begin_src emacs-lisp
(my-normal-and-insert-define-key :infix "g" <maps...>)
#+end_src

There is also a =:predicate= keyword for giving a condition under which a map should be active.

** Displaying Keybindings
General keeps track of all your keybindings and allows presenting them as tables in an org buffer using ~general-describe-keybindings~. They will be displayed in this order:

- Buffer local keybindings (i.e. =:keymaps 'local=)
- Global keybindings (i.e. =:keymaps 'global=)
- Global evil keybindings (e.g. =:keymaps 'evil-normal-state-map=)
- Other keybindings

Within these categories keymaps, states, and keybindings will be presented in the order they were created in.

** Positional Argument Wrappers
When you're defining keys in specific keymaps and states, using positional arguments can be shorter. General has two macros that can basically act as drop-in replacements for ~define-key~ and ~evil-define-key~. They are ~general-emacs-define-key~ and ~general-evil-define-key~. These are simply wrappers for ~general-define-key~ that pass the positional arguments to the corresponding keywords. However, for compatibility with ~define-key~ and ~evil-define-key~, it is not necessary to quote a single keymap. When you specify multiple keymaps, the list should still be quoted.

For example, the following are equivalent:
#+begin_src emacs-lisp
(general-define-key :keymaps 'org-mode-map
                    "M-n" 'org-next-visible-heading
                    "M-p" 'org-previous-visible-heading)
(general-emacs-define-key org-mode-map
  "M-n" 'org-next-visibl-heading
  "M-p" 'org-previous-visible-heading)

;; rough equivalent with define-key
(with-eval-after-load 'org-mode
  (define-key org-mode-map (kbd "M-n") 'org-next-visible-heading)
  (define-key org-mode-map (kbd "M-p") 'org-previous-visible-heading))
#+end_src

And the following are equivalent:
#+begin_src emacs-lisp
(general-define-key :states '(normal visual)
                    :keymaps 'org-mode-map
                    "gj" 'org-next-visible-heading
                    "gk" 'org-previous-visible-heading)
(general-evil-define-key '(normal visual) org-mode-map
  "gj" 'org-next-visible-heading
  "gk" 'org-previous-visible-heading)

;; equivalent with evil-define-key
(evil-define-key '(normal visual) org-mode-map
  "gj" 'org-next-visible-heading
  "gk" 'org-previous-visible-heading)
#+end_src

The actual behavior of these two macros is the same as ~general-define-key~. You can still use ~general-define-key~'s keyword arguments after the positional arguments:
#+begin_src emacs-lisp
;; these are both valid
(general-emacs-define-key 'global
  :prefix "C-c"
  "/" 'swiper)

(general-evil-define-key 'normal org-mode-map
  :prefix "SPC"
  "g" 'worf-goto)
#+end_src

As for ~global-set-key~ and ~global-evil-set-key~, wrappers are not needed. By default ~general-define-key~ acts like ~global-set-key~, and ~general-emacs-define-key~ can also act like ~global-evil-set-key~ using the symbols for evil's states.

** Notes for Evil Users
When =:states= is specified (or ~general-default-states~ is non-nil), ~general-define-key~ will act as a wrapper around ~evil-define-key~. This means that the following are equivalent:
#+begin_src emacs-lisp
(general-define-key :states '(normal visual)
                    "j" 'my-j)

(evil-define-key '(normal visual) (current-global-map)
  "j" 'my-j)
#+end_src

Note that the "standard" way to define global keybindings for an evil state is as follows:
#+begin_src emacs-lisp
(define-key evil-normal-state-map "j" 'my-j)
(define-key evil-visual-state-map "j" 'my-j)
;; or
(evil-global-set-key 'normal "j" 'my-j)
(evil-global-set-key 'visual "j" 'my-j)
#+end_src

These are the equivalents with general:
#+begin_src emacs-lisp
(general-define-key :keymaps '(evil-normal-state-map evil-visual-state-map)
                    "j" 'my-j)
;; using the shorthand symbols
(general-define-key :keymaps '(normal visual)
                    "j" 'my-j)
;; using a vim definer
(general-evil-setup)
(general-nvmap "j" 'my-j)
#+end_src

Note that keybindings made for normal state in the global map will override keybindings made for =evil-normal-state-map=. The keybinding may not change immediately if you do this in a buffer though. For a potentially practical use for the former method, see [[https://github.com/noctuid/evil-guide#preventing-certain-keys-from-being-overridden][here]].

** Global Evil Keymap Shorthand
To prevent the need to type out something like =evil-inner-text-objects-map=, general provides shorthand symbols for the various evil states and text object maps to be used with =:keymaps=. This allows similar syntax to the state argument for ~evil-global-set-key~ or ~evil-define-key~:
#+begin_src emacs-lisp
(general-define-key :keymaps 'motion
                    "j" 'evil-next-line)
#+end_src
Note that this is different from using =:states 'motion= (see [[#notes-for-evil-users][Notes for Evil Users]]).

Besides the state keymaps, you can also use =inner= and =outer= in place of =evil-inner-text-objects-map= and =evil-outer-text-objects-map=.

** Vim-like Wrappers
~general-evil-setup~ is used to generate key definition functions that are named similarly to vim's. Currently, the following functions are created:

- ~general-imap~
- ~general-emap~
- ~general-nmap~
- ~general-vmap~
- ~general-omap~
- ~general-mmap~
- ~general-rmap~
- ~general-otomap~
- ~general-itomap~
- ~general-iemap~
- ~general-nvmap~
- ~general-tomap~

You can see the help text for each for a more specific description. ~general-evil-setup~ takes two optional arguments. If the first is non-nil, shorter aliases for these functions such as ~nmap~ will be created. If the second is non-nil, the function will default to setting ~:states~ and using the global map instead of ~:keymaps~ (see [[#notes-for-evil-users][Notes for Evil Users]]). This can be altered later by altering ~general-vim-definer-default~.

If there is some other combination you would like to use, you can use ~general-create-vim-definer~ or ~general-create-dual-vim-definer~.

** Buffer Local Keybindings
Specifying ~:keymaps 'local~ will bind keys in the current buffer alone, which may be useful in rare cases. This is not the same as using ~local-set-key~ (which will set the key for the current buffer's major mode). It uses ~evil-local-set-key~ when an evil state is given or a function that creates a minor mode for the current buffer otherwise.

** Predicates
The user can use the ~:predicate~ keyword to specify a condition under which the map(s) should be active. For example:
#+begin_src emacs-lisp
(general-define-key :keymaps 'local
                    ;; \\' is the buffer end
                    :predicate '(looking-at "\\'")
                    "<right>" 'beginning-of-buffer)
#+end_src

~<right>~ will now behave normally except at the end of the buffer where it will jump to the beginning of the buffer. Note that with ~:predicate~, you can still only have a key bound once in a single keymap. If you want to have a key take a lot of different actions depending on conditions in a single keymap, you'll want to put those conditions directly in the command or use something like [[https://github.com/yuutayamada/mykie-el][mykie]] instead.

See [[http://endlessparentheses.com/define-context-aware-keys-in-emacs.html][this post]] for more information about how this works.

** Functions to Help With Key Definition
*** Simulating Keypresses
General provides a macro called ~general-simulate-keys~ that can be used to simulate a key sequence. In some cases, this can be used similarly to a keyboard macro, but it has some advantages. Unlike with a keyboard macro, prefix arguments will work for the command the key simulates. The key simulated does not have to correspond to the full key sequence for a command. In these cases [[https://github.com/justbur/emacs-which-key][which-key]] will show the keys bound under the simulated prefix. For example:
#+begin_src emacs-lisp
(general-nmap "SPC" (general-simulate-keys "C-c"))
#+end_src

~general-simulate-key~ can take an optional argument (for use with evil only) that will cause the keys to be simulated in emacs state. This allows something like the following to work:
#+begin_src emacs-lisp
(general-nmap "j" (general-simulate-keys "C-n" t))
#+end_src

The key section can also be replaced by a list of a command and keys (e.g. ~(general-simulate-keys (#'evil-delete "iw"))~). See the next section for a reasonable use case for this feature.

Also note that ~general-simulate-keys~ creates a named function with a docstring, so which-key and ~describe-key~ will work properly for keys bound to a command created with it. The automatically generated function name and docstring can be replaced with optional arguments:
#+begin_src emacs-lisp
(general-nmap "SPC" (general-simulate-keys
                     "C-c" t
                     "Simulate C-c in emacs state with SPC."
                     general-SPC-simulates-C-c))
#+end_src

Make sure that you don't bind a key to simulate itself (e.g. ~(general-emap "C-n" (general-simulate-keys "C-n" t))~) as it wouldn't do anything (and would cause an infinite loop).

*** Mapping Under Non-prefix Keys
This functionality is mainly targeted at evil users, but it could potentially be useful for non-evil users as well. In vim you can bind something like =cow= without a problem. With evil, =c= is bound to ~evil-change~, so you can't bind directly to =cow=. A workaround for this case is to bind a key in ~evil-operator-state-map~, but this won't work, for example, if you wanted to bind =ctb= or =cw= to something special. I've come up with a more general workaround, ~general-key-dispatch~. Consider the following example:
#+begin_src emacs-lisp
(general-nmap "c"
              (general-key-dispatch 'evil-change
                "ow" 'toggle-word-wrap
                "w" (general-simulate-keys ('evil-change "iw"))
                "tb" 'some-command
                "c" 'evil-change-whole-line
                ;; could be used for other operators where there
                ;; isn't an existing command for the linewise version:
                ;; "c" (general-simulate-keys ('evil-change "c"))
                ))
(general-vmap "c" 'evil-change)
#+end_src

In this example, the function created will execute any of the mapped key sequences or fall back to ~evil-change~. For example, =ow= is mapped, so =cow= will run ~toggle-word-wrap~. On the other hand, =b= is not mapped, so =cb= will act the same as =cb= would by default. Counts and repeating should still work for both the mapped keys and fallback command. Because evil handles =cc= differently (since =c= is not a motion), =c= must be explicitly bound to ~evil-change-whole-line~ (or to simulate "cc") to keep its behavior. In visual state, =c= is not actually bound by default and will use the normal state command, so to keep =c= working the same in visual state, you should explicitly bind it to ~evil-change~.

Another thing to note is that you can't bind a key in the ~general-key-dispatch~ section to simulate the base key (in this case =c=). For this example, you cant't bind =w= to ~(general-simulate-keys "ciw")~. While this won't cause an infinite loop, it won't work either, so you have to use the command name instead. Also, if you use a count in the middle (i.e =c2w=), it will act as =c2w= and not =c2iw=. If anyone cares about this, I could probably add an option to allow changing the count in the middle without immediately falling back to the default command.

Another possible use is to emulate vim's =imap=. For example, you can recreate the common =jk= to =<esc>= keybinding:
#+begin_src emacs-lisp
(general-imap "j"
              (general-key-dispatch 'self-insert-command
                "k" 'evil-normal-state))
#+end_src

If you plan on using more than one of these with ~self-insert-command~, you'll need to use the =:name= keyword argument to prevent the newly created functions from clobbering each other.

Another thing to note is that commands created in this way will not time out, and =j= will only be inserted after the next keypress. For an alternate way to do this, you might want to look at [[https://github.com/vlevit/key-seq.el][key-seq.el]] and [[https://www.emacswiki.org/emacs/key-chord.el][key-chord.el]].

** Creating Extra Keybinding Functions
The primary purpose of this package is to provide a single function for key definitions that is simple and flexible. Most users probably won't want to use this functionality (apart from ~general-evil-setup~). However, if you would like more specific keybinding functions for certain prefixes, evil states, or keymaps, this package provides macros to generate these functions.

The ~general-create-definer~ macro can create functions for more succinctly defining keys. This is basically the same as naming a function with different defaults. For example, it can also be used to create a function that will always default to a certain prefix (like ~evil-leader~ does):
#+begin_src emacs-lisp
(general-create-definer my-leader1 :keymaps 'global :prefix "C-c")
;; bind "C-c o" to other-window
(my-leader1 "o" 'other-window)
#+end_src

The user could also set ~general-default-prefix~, ~general-default-state~, or ~general-default-keymap~ to a different value within a function to achieve a similar effect.

As another example, one could make an extra vim definer using ~general-create-dual-vim-definer~:
#+begin_src emacs-lisp
(general-create-dual-vim-definer nviemap '(normal visual insert emacs))
#+end_src
As previously mentioned, how the newly created function creates keybindings can be altered by setting =general-vim-definer-default=. Unlike with ~general-create-definer~, you can't specify defaults for other keyword arguments with ~general-create-dual-vim-definer~. If anyone would like to be able to do this to, for example, set a default prefix for the created function, feel free to make an issue.

** Use-package Keyword
General also optionally provides a use-package keyword. =:general= is similar to =:bind= in that it implies =:defer t= and will create autoloads for the bound commands (though this is usually not necessary). The keyword is followed by one or more lists containing arguments for ~general-define-key~; there is no difference in syntax:
#+begin_src emacs-lisp
(use-package org
  :general
  ("C-c c" 'org-capture)
  (:keymaps 'org-mode-map
   "TAB" 'org-cycle))
#+end_src

The =:general= keyword also supports using wrappers (including builtin the wrappers that take positional arguments) by manually specifying them:
#+begin_src emacs-lisp
(use-package org
  :general
  (general-nmap "SPC c" 'org-capture)
  (general-evil-define-key 'normal org-mode-map
    "TAB" 'org-cycle))
#+end_src
If you would like to use =:general= with your own wrapper that takes positional arguments, please make an issue, and I can add a generic way to add support for wrappers that take positional arguments.

One annoyance you may encounter is that the default function for indentation will indent a list starting with a keyword like a function:
#+begin_src emacs-lisp
(:keymaps 'org-mode-map
          "TAB" 'org-cycle)
#+end_src

This is an annoyance you may have using other emacs packages as well and can be fixed by modifying =lisp-indent-function= (see [[http://emacs.stackexchange.com/q/10230/5278][this emacs stackexchange question]] and Fuco1's modified ~lisp-indent-function~ in one of the answers there).

** Use with Key-chord
General provides a simple function that will rewrite a string into a key-chord vector. This allows you to easily use general to create definitions for =key-chord.el=. The following are equivalent:

#+begin_src emacs-lisp
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(general-define-key :keymaps 'evil-insert-state-map
                    (general-chord "jk") 'evil-normal-state
                    (general-chord "kj") 'evil-normal-state)
#+end_src

Note that the order of the keys does matter unlike with the default ~key-chord-define~.

** Extended Definition Syntax
General supports some extra per-map keywords. As an example, an extended definition can be used to create an "autoload" for a keymap like use-package's =:bind-keymap= keyword does:
#+begin_src emacs-lisp
(general-define-key
 "C-c p" '(:keymap projectile-command-map :package projectile))
#+end_src

Using this feature, a key can be bound to a keymap that does not exist yet and still work as expected. Projectile will be loaded when =C-c p= is used for the first time. This is done by using an intermediate function to load the package and rebind the keys.

=:package= can be specified locally within the extended definition or globally. When using the use-package =:general= keyword, it will automatically be specified.

=:keymap= must be specified in this case so that the unbound symbol can be distinguished as a keymap rather than a command. For other extended definitions, you can simply specify the definition as the first item in the list or explicitly use the =:command= keyword. The third "type" of extended definition is one where no binding is created, which can be done using =:ignore t=. In this case, the extended definition is used only for its side effects. This is potentially useful for the =:which-key= keyword that will add replacement strings for the bound keys:
#+begin_src emacs-lisp
(general-define-key :keymaps 'normal :prefix "SPC"
  ;; unbind SPC and give it a description for which-key
  "" '(nil :which-key "my prefix")
  ;; bind nothing but give SPC f a description for which-key
  "f" '(:ignore t :which-key "file prefix")
  ...)
#+end_src

One potential benefit of using =:which-key= instead of ~which-key-add-key-based-replacements~ directly even for keys that won't be bound is that descriptions will be added for all key sequences (i.e. when =:non-normal-prefix= and/or =:global-prefix= are also specified). The =:which-key= keyword can also be used with the =:major-mode= keyword (locally or globally) to use ~which-key-add-major-mode-key-based-replacements~ instead of ~which-key-add-key-based-replacements~ to add the replacement strings.

New keywords and functionality can be added by the user by adding a keyword to =general-extended-def-keywords= and creating a corresponding function named ~general-extended-def-:<keyword>~. This function will be passed in =state keymap key def kargs=. =state= and =keymap= are the state (nil if none) and keymap the =key= (kbd already used) is being bound in. =def= is the extended definition itself, and =kargs= is a list of all the keyword arguments given to the original ~general-define-key~. This could, for example, be used to do something like add a keyword that would create autoloads for commands (I could also add this functionality directly if anyone wants it). For an example, see ~general-extended-def-:which-key~.

Here are the keywords currently available.

"Type" specifiers:
- =:command= - implicit; no special functionality
- =:keymap= - for creating "autoloaded" keymaps with =:package=
  - =:package= - the package to load (global or local)
- =:ignore= - do not create a keybinding for the key def pair

Which-key functionality:
- =:which-key= - the replacement text
- =:major-mode= - the mode to add the text for (optional; global or local)

Global keywords that can be overridden locally:
- =:predicate=
